#!/sbin/openrc-run

name=$RC_SVCNAME
description="Seaman App Service"
command="/root/middleware/sm_speaker_test/run.sh"
command_user="root"
pidfile="/run/$RC_SVCNAME.pid"
command_background="yes"
directory="/root/middleware/sm_speaker_test"

depend() {
    need net seaman-daemon
    after bootmisc
}

start_pre() {
    until curl -si http://localhost:8080 -d '{}' | grep "200 OK"; do sleep 1; done
    
    echo "Checking directory status..."
    if [ ! -d "/root/middleware/sm_speaker_test" ]; then
        echo "Directory does not exist, creating..."
        mkdir -p /root/middleware/sm_speaker_test
    fi
    
    echo "Checking if directory is empty..."
    if [ -z "$(ls -A /root/middleware/sm_speaker_test)" ]; then
        echo "Directory is empty, copying files..."
        mkdir -p /root/middleware/sm_speaker_test/assets/{audio,font,gifs,images,trigger}
        cp -r /media/mmcblk0p1/seaman/speaker/* /root/middleware/sm_speaker_test/
    else
        echo "Directory not empty, skipping copy..."
        ls -la /root/middleware/sm_speaker_test
    fi
    
    chmod -R 755 /root/middleware/sm_speaker_test

    mkdir -p /root/.ssh
    cp -r /media/mmcblk0p1/seaman/.ssh/* /root/.ssh/
    chmod 700 /root/.ssh
    chmod 600 /root/.ssh/id_ed25519
    chmod 644 /root/.ssh/id_ed25519.pub

    # Create and setup venv
    python3 -m venv /root/middleware/sm_speaker_test/.venv
    source /root/middleware/sm_speaker_test/.venv/bin/activate
    pip install --no-cache-dir schedule openai numpy google-cloud pyaudio
    
    if [ -d "/media/mmcblk0p1/seaman/.ssh" ]; then
        mkdir -p /root/middleware/.ssh
        cp -r /media/mmcblk0p1/seaman/.ssh/* /root/middleware/.ssh/
        chmod 700 /root/middleware/.ssh
        chmod 600 /root/middleware/.ssh/id_ed25519
        chmod 644 /root/middleware/.ssh/id_ed25519.pub
    fi
}

stop() {
    ebegin "Stopping ${RC_SVCNAME}"
    local pid=$(cat "${pidfile}")
    echo "Sending SIGTERM to process group: -${pid}"
    kill -TERM -${pid} 2>/dev/null
    
    # Wait for process to handle SIGTERM
    local timeout=30
    while [ $timeout -gt 0 ] && kill -0 ${pid} 2>/dev/null; do
        sleep 1
        timeout=$((timeout - 1))
    done
    
    # If process still running, force kill
    if kill -0 ${pid} 2>/dev/null; then
        echo "Process still running, sending SIGKILL"
        kill -KILL -${pid}
    fi
    
    eend $?
}

stop_post() {
    echo "Running stop_post cleanup..."
    
    # Give Python process time to clean up display
    sleep 2
    
    # Remove lock file
    rm -f /tmp/audio_device.lock
    
    # Clean up any remaining audio processes
    fuser -k /dev/snd/* 2>/dev/null || true
    pulseaudio --kill 2>/dev/null || true
    
    # Final sleep to ensure cleanup completes
    sleep 2
    
    echo "Stop_post cleanup completed"
}